package com.tirq.reports.servlet;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

@WebServlet(value="/report")
public class ReportServlet extends HttpServlet implements Serializable {

	private static final long serialVersionUID = 1L;

	public void init(ServletConfig config) throws ServletException {
		super.init(config);
	}
	
	//commons-beanutils-1.8.3.jar
	//commons-beanutils-bean-collections-1.8.3.jar
	//commons-beanutils-core-1.8.3.jar
	//commons-logging-1.1.3.jar
	//iText-2.1.7.jar
	//jasperreports-5.5.0.jar
	public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		try {
			byte[] bytes = JasperRunManager.runReportToPdf(populaPathReportIO(), reportParameters(), reportData(request.getParameter("data")));
			response.reset();
			response.setContentType("application/pdf");
			if (request.getParameter("file") != null) {
				response.addHeader("Content-Disposition", "attachment; filename=\"" + "file_.pdf");
			}
			ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
			byteOut.write(bytes);
			byteOut.toByteArray();
			BufferedOutputStream bos = new BufferedOutputStream(response.getOutputStream());
			bos.write(byteOut.toByteArray(), 0, byteOut.toByteArray().length);
			bos.flush();
			bos.close();
		} catch (Exception e) {
			e.printStackTrace();
			response.setContentType("text/html");
			response.setCharacterEncoding("UTF-8");
			error(e.getMessage(), response.getWriter());
		}
	}

	public void error(String erro, PrintWriter out) {
		out.println("<!DOCTYPE html>");
		out.println("<html>");
		out.println("<head>");
		out.println("</head>");
		out.println("<body>");
		out.println(erro);
		out.println("</body>");
		out.println("</html>");
	}

	public JRDataSource reportData(String data) {
		if (data != null) {
			List<Map<String, Object>> fields = new ArrayList<Map<String, Object>>();
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("field", "field java");
			fields.add(map);
			return new JRBeanCollectionDataSource(fields);
		}
		return new JREmptyDataSource();
	}

	public String populaPathReportIO() throws MalformedURLException {
		return getServletContext().getResource("/WEB-INF/reports/report.jasper").getPath();
	}

	public Map<String, Object> reportParameters() {
		try {
			Map<String, Object> parameters = new HashMap<String, Object>();
			parameters.put("PARAMETER", "parameter Java");
			return parameters;
		} catch (Exception e) {
			e.printStackTrace();
			return new HashMap<String, Object>();
		}
	}

}
